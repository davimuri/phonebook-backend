{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","nameFilter","eventHandler","value","onChange","PersonForm","onSubmit","name","onChangeName","number","onChangeNumber","type","Person","person","deleteHandler","onClick","Persons","persons","map","p","key","id","Notification","data","message","className","baseUrl","axios","get","then","response","newPerson","post","personId","delete","put","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNameFilter","notification","setNotification","useEffect","console","log","getPersons","personsService","personList","length","personsToShow","filter","toLowerCase","startsWith","sendNotification","setTimeout","event","target","preventDefault","personWithSameName","find","undefined","window","confirm","updatedPerson","catch","error","createdPerson","concat","errorMsg","personToDelete","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae47b744.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ nameFilter, eventHandler }) => (\n    <>\n      filter shown with <input value={nameFilter} onChange={eventHandler} />\n    </>\n)\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = ({ onSubmit, name, onChangeName, number, onChangeNumber }) => (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={name} onChange={onChangeName} />\n      </div>\n      <div>\n        number: <input value={number} onChange={onChangeNumber} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n)\n  \nexport default PersonForm;\n","import React from 'react';\n\nconst Person = ({ person, deleteHandler }) => {\n  return (\n    <>\n      {person.name} {person.number}\n      <button onClick={deleteHandler(person)}>Delete</button><br />\n    </>\n  )\n}\n\nconst Persons = ({ persons, deleteHandler }) => (\n    persons.map(p => <Person key={p.id} person={p} deleteHandler={deleteHandler} />)\n)\n\nexport default Persons;\n","import React from 'react';\n\nconst Notification = ({ data }) => {\n    if (data.message === null) {\n      return null\n    }  \n    return (\n      <div className={data.type}>\n        {data.message}\n      </div>\n    )\n}\n\nexport default Notification\n","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newPerson => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nconst remove = personId => {\n    const request = axios.delete(`${baseUrl}/${personId}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newPerson) => {\n    const request = axios.put(`${baseUrl}/${id}`, newPerson)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personsService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notification, setNotification ] = useState({ message: null , type: null })\n\n  useEffect(() => {\n    console.log('effect')\n    getPersons()\n  }, [])\n\n  const getPersons = () => {\n    personsService\n      .getAll()\n      .then(personList => {\n        console.log('promise fulfilled')\n        setPersons(personList)\n      })\n  }\n\n  console.log('render', persons.length, 'persons')\n\n  const handleNameFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  const personsToShow = persons.filter(p => nameFilter ? \n    p.name.toLowerCase().startsWith(nameFilter.toLowerCase()) : true)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleDeletePerson = personToDelete => () => {\n    if (window.confirm(`Delete ${personToDelete.name} ?`)) {\n      personsService\n        .remove(personToDelete.id)\n        .then(data => {\n          setPersons(persons.filter(p => p.id !== personToDelete.id))\n          sendNotification({ message: `${personToDelete.name} was deleted`, type: 'info'})\n        })\n        .catch(error => {\n          sendNotification({ message: `Error: ${personToDelete.name} was alreaday deleted`, type: 'error'})\n          getPersons()\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personWithSameName = persons.find(p => p.name === newName)\n    if (personWithSameName !== undefined) {\n      const confirmUpdate = \n        window.confirm(`${newName} is already added to the phonebook, replace the old number with the new one?`)\n      if (confirmUpdate) {\n        const newPerson = { name: newName, number: newNumber }\n        personsService\n          .update(personWithSameName.id, newPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(p => p.id === personWithSameName.id ? updatedPerson : p))\n            setNewName('')\n            setNewNumber('')\n            sendNotification({ message: `${updatedPerson.name}'s number was updated`, type: 'info'})\n          })\n          .catch(error => {\n            sendNotification({ message: `Error: ${personWithSameName.name} couldn't be updated`, type: 'error'})\n          })\n      }\n    } else {\n      const newPerson = { name: newName, number: newNumber }\n      personsService\n        .create(newPerson)\n        .then(createdPerson => {\n          setPersons(persons.concat(createdPerson))\n          setNewName('')\n          setNewNumber('')\n          sendNotification({ message: `${createdPerson.name} was added`, type: 'info'})\n        })\n        .catch(error => {\n          const errorMsg = error.response.data.error || `${newName} couldn't be added`\n          sendNotification({ message: errorMsg, type: 'error'})\n        })\n    }\n  }\n\n  const sendNotification = message => {\n    setNotification(message)\n    setTimeout(() => {\n      setNotification({ message: null , type: null })\n    }, 5000)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification data={notification} />\n      <Filter nameFilter={nameFilter} eventHandler={handleNameFilterChange} />\n      <h2>Add contact</h2>\n      <PersonForm onSubmit={addPerson} name={newName} onChangeName={handleNameChange} \n        number={newNumber} onChangeNumber={handleNumberChange} />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} deleteHandler={handleDeletePerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}